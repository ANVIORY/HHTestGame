import random
from abc import ABC, abstractmethod

class Creature(ABC):
    def __init__(self, name: str, attack: int, defense: int, health: int, damage_range: tuple):
        if not (1 <= attack <= 30):
            raise ValueError("–ê—Ç–∞–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 30.")
        if not (1 <= defense <= 30):
            raise ValueError("–ó–∞—â–∏—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 30.")
        if health <= 0:
            raise ValueError("–ó–¥–æ—Ä–æ–≤—å–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
        if not (isinstance(damage_range, tuple) and len(damage_range) == 2 and damage_range[0] < damage_range[1]):
            raise ValueError("–£—Ä–æ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ—Ä—Ç–µ–∂–µ–º (–º–∏–Ω–∏–º—É–º, –º–∞–∫—Å–∏–º—É–º).")

        self.name = name
        self.attack = attack
        self.defense = defense
        self.max_health = health
        self.health = health
        self.damage_range = damage_range

    def is_alive(self):
        return self.health > 0

    def take_damage(self, damage: int):
        self.health = max(self.health - damage, 0)
        print(f"{self.name} –ø–æ–ª—É—á–∞–µ—Ç {damage} —É—Ä–æ–Ω–∞. –û—Å—Ç–∞–ª–æ—Å—å –∑–¥–æ—Ä–æ–≤—å—è: {self.health}")

    def attack_target(self, target):
        modifier = max(1, self.attack - target.defense + 1)
        rolls = [random.randint(1, 6) for _ in range(modifier)]
        print(f"{self.name} –±—Ä–æ—Å–∞–µ—Ç –∫—É–±–∏–∫–∏: {rolls}")
        if any(roll >= 5 for roll in rolls):
            damage = random.randint(*self.damage_range)
            print(f"–£–¥–∞—Ä —É—Å–ø–µ—à–µ–Ω! {self.name} –Ω–∞–Ω–æ—Å–∏—Ç {damage} —É—Ä–æ–Ω–∞ {target.name}.")
            target.take_damage(damage)
        else:
            print(f"{self.name} –ø—Ä–æ–º–∞—Ö–∏–≤–∞–µ—Ç—Å—è!")

    @abstractmethod
    def take_turn(self, opponent):
        pass

class Player(Creature):
    def __init__(self, name: str, attack: int, defense: int, health: int, damage_range: tuple):
        super().__init__(name, attack, defense, health, damage_range)
        self.heals_left = 4

    def heal(self):
        if self.heals_left > 0:
            amount = int(self.max_health * 0.3)
            self.health = min(self.health + amount, self.max_health)
            self.heals_left -= 1
            print(f"{self.name} –∏—Å—Ü–µ–ª—è–µ—Ç—Å—è –Ω–∞ {amount}. –¢–µ–∫—É—â–µ–µ –∑–¥–æ—Ä–æ–≤—å–µ: {self.health}. –û—Å—Ç–∞–ª–æ—Å—å –∏—Å—Ü–µ–ª–µ–Ω–∏–π: {self.heals_left}")
        else:
            print(f"{self.name} –Ω–µ –º–æ–∂–µ—Ç –±–æ–ª—å—à–µ –∏—Å—Ü–µ–ª—è—Ç—å—Å—è!")

    def take_turn(self, opponent):
        action = input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (—É–¥–∞—Ä/–∏—Å—Ü–µ–ª–∏—Ç—å): ").strip().lower()
        if action == "—É–¥–∞—Ä":
            self.attack_target(opponent)
        elif action == "–∏—Å—Ü–µ–ª–∏—Ç—å":
            self.heal()
        else:
            print("–ù–µ–≤–µ—Ä–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ. –•–æ–¥ –ø—Ä–æ–ø—É—â–µ–Ω.")

class Monster(Creature):
    def take_turn(self, opponent):
        self.attack_target(opponent)

def generate_random_monster():
    names = ["–û—Ä–∫", "–ì–æ–±–ª–∏–Ω", "–¢—Ä–æ–ª–ª—å", "–°–∫–µ–ª–µ—Ç", "–í–∞–º–ø–∏—Ä"]
    name = random.choice(names)
    attack = random.randint(8, 14)
    defense = random.randint(4, 9)
    health = random.randint(75, 100)
    damage_range = (random.randint(3, 5), random.randint(7, 10))
    return Monster(name, attack, defense, health, damage_range)

def main():
    player = Player("–ì–µ—Ä–æ–π", attack=11, defense=6, health=90, damage_range=(4, 9))
    monster = generate_random_monster()

    print(f"\n‚öîÔ∏è –í–∞–º –ø—Ä–æ—Ç–∏–≤–æ—Å—Ç–æ–∏—Ç: {monster.name} (–ê—Ç–∞–∫–∞: {monster.attack}, –ó–∞—â–∏—Ç–∞: {monster.defense}, –ó–¥–æ—Ä–æ–≤—å–µ: {monster.health})")

    while player.is_alive() and monster.is_alive():
        print("\n–•–æ–¥ –∏–≥—Ä–æ–∫–∞:")
        player.take_turn(monster)
        if monster.is_alive():
            print("\n–•–æ–¥ –º–æ–Ω—Å—Ç—Ä–∞:")
            monster.take_turn(player)

    if player.is_alive():
        print("\nüéâ –ü–æ–±–µ–¥–∞! –í—ã –ø–æ–±–µ–¥–∏–ª–∏ –º–æ–Ω—Å—Ç—Ä–∞!")
    else:
        print("\nüíÄ –í—ã –±—ã–ª–∏ –ø–æ–±–µ–∂–¥–µ–Ω—ã...")

if __name__ == "__main__":
    main()
